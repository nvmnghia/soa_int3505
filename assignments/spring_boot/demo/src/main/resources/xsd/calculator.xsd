<!-- XML -->

<!-- xmlns:ns_id=IRI -->
<!-- Define a namespace IRI, identified by ns_id. -->

<!-- ns_id:el means element el of namespace ns_id. -->
<!-- Namespace is used to group together some elements of the same purpose. -->
<!-- Element with namespace is qualified. -->
<!-- More generally: prefix:local_part. -->
<!-- https://stackoverflow.com/questions/25788871/xml-do-child-nodes-inherit-parents-namespace-prefix -->
<!-- Unqualified element is in the default namespace,
     which is inherited from ancestors's default. -->

<!-- IRI is usually a URL to ensure uniqueness. -->
<!-- IRI is important. Many ns_ids use the same IRI and they're treated as one. -->
<!-- https://stackoverflow.com/questions/1181888/what-does-xmlns-in-xml-mean -->
<!-- IRI can be anything, even random string lol. -->
<!-- xmlns without namespace idetifier defines the default one. -->

<!-- https://www.w3schools.com/xml/schema_howto.asp -->
<!-- schemaLocation is used in XML to refer to the XSD that it conforms to. -->


<!-- XSD specific -->

<!-- Root element must be <schema> -->

<!-- xsi:    conventional identifier for the INSTANCE (xml) namespace. -->
<!-- xsd/xs: conventional identifier for the SCHEMA (xsd itself) namespace. -->

<!-- https://stackoverflow.com/questions/4126919/what-is-the-difference-between-targetnamespace-and-xmlnstarget -->
<!-- targetNamespace defines THE namespace that the schema validates,
     and is not related to the namespace of the XSD itself. -->
<!-- https://stackoverflow.com/a/34204799/5959593 -->
<!-- Root element's namespace of an XML should match
     targetNamespace of its validator XSD. -->
<!-- Therefore, the below schema could omit xs prefix
     and just set xmlns, instead of xmlns:xs. -->

<!-- XSD can defines/validates:
     - Type
     - Name
     - Order
     - Number of occurences
     - Attributes
     - Default values
     - ...
     of an element. -->


<!-- WSDL generation specific -->
<!-- In XSD, message elements' name attributes end with either
     - Request, or
     - Response
     These suffixes can be changed in WSDL config. -->
<!-- WSDL can be generated only if XSD follows this suffix convention. -->

<xs:schema
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:tns="http://soa.com/soap/calculator"
    targetNamespace="http://soa.com/soap/calculator"
    elementFormDefault="qualified"
>
    <xs:element name="getSumRequest">
        <xs:complexType>    <!-- Element contains other elements. Also used to define custom type. -->
            <xs:sequence maxOccurs="1" >    <!-- Children must be in exact order. -->
                    <!-- min/maxOccurs: num of child occurence. Default to 1.
                         If minOccurs > 1, maxOccurs must also be set to avoid default 1.
                         Occurence count at the whole block, e.g. if minOccurs = 2:
                         <first>
                         <second>
                         <first>
                         <second> -->
                <xs:element name="firstSummand"  type="xs:int" default="0" />
                <xs:element name="secondSummand" type="xs:int" nillable="false" />
                                            <!-- type: int/string/boolean/date/... -->
            </xs:sequence>
        </xs:complexType>
    </xs:element>

    <xs:element name="getSumResponse">
        <xs:complexType>
            <xs:sequence>
                <xs:element name="result" type="xs:int" />
                <xs:element name="error"  type="xs:string" />
            </xs:sequence>
        </xs:complexType>
    </xs:element>
</xs:schema>
